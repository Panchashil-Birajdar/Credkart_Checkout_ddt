{"name": "test_credKart_Login_params_003[GetDataForLogin2]", "status": "failed", "statusDetails": {"message": "AssertionError: assert False", "trace": "self = <testCases.test_Login_params.Test_credKart_Login_params object at 0x000002A5487209D0>\nsetup = <selenium.webdriver.edge.webdriver.WebDriver (session=\"2f264191aad7fb93aed46c520e1d9a50\")>\nGetDataForLogin = ('Credenceppb3@test1.com', 'Credence@123')\n\n    def test_credKart_Login_params_003(self,setup,GetDataForLogin):\n        self.driver = setup\n        self.driver.find_element(By.XPATH,\"//a[normalize-space()='Login']\").click()\n        self.driver.find_element(By.XPATH, \"//input[@id='email']\").send_keys(GetDataForLogin[0])\n        self.driver.find_element(By.XPATH, \"//input[@id='password']\").send_keys(GetDataForLogin[1])\n        self.driver.find_element(By.XPATH, \"//button[@type='submit']\").click()\n    \n        try:\n>           self.driver.find_element(By.XPATH,\"//h2[normalize-space()='CredKart']\")\n\ntestCases\\test_Login_params.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:741: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002A548793F10>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...062EC1+213521]\\\\n\\\\tBaseThreadInitThunk [0x00007FFF70F854E0+16]\\\\n\\\\tRtlUserThreadStart [0x00007FFF71E4485B+43]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//h2[normalize-space()='CredKart']\"}\nE         (Session info: MicrosoftEdge=121.0.2277.128); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6540DB892+60738]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF654067B32+233090]\nE       \t(No symbol) [0x00007FF653E7AE0B]\nE       \t(No symbol) [0x00007FF653ECA947]\nE       \t(No symbol) [0x00007FF653ECAA55]\nE       \t(No symbol) [0x00007FF653F0C277]\nE       \t(No symbol) [0x00007FF653EEC60F]\nE       \t(No symbol) [0x00007FF653EBE201]\nE       \t(No symbol) [0x00007FF653F09528]\nE       \t(No symbol) [0x00007FF653EEC233]\nE       \t(No symbol) [0x00007FF653EBD568]\nE       \t(No symbol) [0x00007FF653EBC394]\nE       \t(No symbol) [0x00007FF653EBD101]\nE       \tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF654297D2C+1072924]\nE       \t(No symbol) [0x00007FF653F40F45]\nE       \t(No symbol) [0x00007FF653FD8F6C]\nE       \t(No symbol) [0x00007FF653FD0A5D]\nE       \tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF654296773+1067363]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF654071A88+273880]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF65406C794+252644]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF65406C8C2+252946]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF654062EC1+213521]\nE       \tBaseThreadInitThunk [0x00007FFF70F854E0+16]\nE       \tRtlUserThreadStart [0x00007FFF71E4485B+43]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testCases.test_Login_params.Test_credKart_Login_params object at 0x000002A5487209D0>\nsetup = <selenium.webdriver.edge.webdriver.WebDriver (session=\"2f264191aad7fb93aed46c520e1d9a50\")>\nGetDataForLogin = ('Credenceppb3@test1.com', 'Credence@123')\n\n    def test_credKart_Login_params_003(self,setup,GetDataForLogin):\n        self.driver = setup\n        self.driver.find_element(By.XPATH,\"//a[normalize-space()='Login']\").click()\n        self.driver.find_element(By.XPATH, \"//input[@id='email']\").send_keys(GetDataForLogin[0])\n        self.driver.find_element(By.XPATH, \"//input[@id='password']\").send_keys(GetDataForLogin[1])\n        self.driver.find_element(By.XPATH, \"//button[@type='submit']\").click()\n    \n        try:\n            self.driver.find_element(By.XPATH,\"//h2[normalize-space()='CredKart']\")\n            print(\"Login testcase is Passed\")\n            self.driver.save_screenshot(\".\\\\ScreenShots\\\\\"+GetDataForLogin[0]+\"_\"+GetDataForLogin[1]+\"_\"+\"test_credKart_Login_params_003_Passed.PNG\")\n            self.driver.close()\n            assert True\n        except:\n            print(\"Login testcase is Failed\")\n            self.driver.save_screenshot(\".\\\\ScreenShots\\\\\"+GetDataForLogin[0]+\"_\"+GetDataForLogin[1]+\"_\"+\"test_credKart_Login_params_003_Failed.PNG\")\n            self.driver.close()\n>           assert False\nE           assert False\n\ntestCases\\test_Login_params.py:37: AssertionError"}, "attachments": [{"name": "stdout", "source": "6d762818-cdb8-4290-89f4-439c7261bf73-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "GetDataForLogin", "value": "('Credenceppb3@test1.com', 'Credence@123')"}], "start": 1708609087023, "stop": 1708609089881, "uuid": "6d807988-76d4-4501-85ce-2545b1b564ff", "historyId": "c398bddffc6cc41eda965e42004624d6", "testCaseId": "3aea96ccf85727936550205e32d227e6", "fullName": "testCases.test_Login_params.Test_credKart_Login_params#test_credKart_Login_params_003", "labels": [{"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_Login_params"}, {"name": "subSuite", "value": "Test_credKart_Login_params"}, {"name": "host", "value": "DESKTOP-OJCC0SH"}, {"name": "thread", "value": "2904-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_Login_params"}]}